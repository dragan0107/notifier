name: Build Android APK

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Prebuild Android
        run: npx expo prebuild --platform android

      - name: Decode keystore
        run: |
          mkdir -p android/app/keystores
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystores/release.keystore

      - name: Create signing config
        run: |
          mkdir -p $HOME/.gradle
          echo "MYAPP_RELEASE_STORE_FILE=$GITHUB_WORKSPACE/android/app/keystores/release.keystore" >> $HOME/.gradle/gradle.properties
          echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> $HOME/.gradle/gradle.properties
          echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> $HOME/.gradle/gradle.properties
          echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> $HOME/.gradle/gradle.properties

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build release APK
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=1g"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Android APK Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Generate QR Code for Direct APK Download
        run: |
          # Get the direct download URL for the release asset
          APK_DOWNLOAD_URL="${{ steps.upload_release_asset.outputs.browser_download_url }}"
          
          # Generate QR code using qrencode
          sudo apt-get update && sudo apt-get install -y qrencode
          
          echo "ðŸ“± Direct APK Download QR Code:"
          echo "Scan this QR code with your phone to instantly download the APK:"
          echo ""
          qrencode -t ansiutf8 "$APK_DOWNLOAD_URL"
          echo ""
          echo "ðŸ”— Direct download URL: $APK_DOWNLOAD_URL"
          echo "ðŸ“¦ File: app-release.apk"